# https://www.lilygo.cc/products/t-can485
# https://github.com/strandborg/AlsavoCtrl
# https://www.pooltime.se/produkt/poolvarmepump-brilix-xhpfdplus100-9kw-r32/
# https://www.pooltime.se/wp-content/images/Albixon_XHPFDPLUS_Navod_v01-EN-5.pdf?srsltid=AfmBOopr3gEpYnWTakd3qigcnlKmYu03VdoNzdApE7bZ7hzBklx6N4Bv


# This is code is beta and is under testing!

substitutions:
  name_prefix: Brilix Heat Pump

esphome:
  name: brilix-heat-pump
  comment: Modbus interface for BRILIX inverBOOST XHPFDPLUS 100 E 9kW R32 (Alsavo) heat pump
  on_boot:
    then:
      - output.turn_on: bus_power
      - output.turn_on: RS485_EN
      - output.turn_on: RS485_SE

esp32:
  board: esp32dev
  framework:
    type: esp-idf
    version: recommended


logger:
  baud_rate: 0



wifi:
  ssid: !secret wifi__iot2_ssid
  password: !secret wifi_iot2_password
  manual_ip:
    static_ip: 192.168.2.251
    gateway: 192.168.2.1
    subnet: 255.255.255.0
  enable_btm: true
  enable_rrm: true

  ap:
    ssid: ${name_prefix}
    password: !secret wifi_ap_password
captive_portal:
api:
  encryption:
    key: !secret api_key
 
ota:
  - platform: esphome
    password: !secret ota_password



output:
  - platform: gpio
    pin: GPIO17
    id: RS485_EN
  - platform: gpio
    pin: GPIO19
    id: RS485_SE
  - platform: gpio
    pin: GPIO16
    id: bus_power

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${name_prefix} - IP Address"
    ssid:
      name: "${name_prefix} - Wi-Fi SSID"
    bssid:
      name: "${name_prefix} - Wi-Fi BSSID"
  - platform: version
    name: "${name_prefix} - ESPHome Version"
    hide_timestamp: true     

uart:
  rx_pin: GPIO21
  tx_pin: GPIO22
  baud_rate: 9600
  parity: NONE
  id: u_modbus 
  debug:
    direction: BOTH
    dummy_receiver: true
    after:
      timeout: 1 ms 


modbus:
  uart_id: u_modbus
  id: c_modbus
modbus_controller:
  - id: heatpump
    address: 2
    modbus_id: c_modbus
    update_interval: 20s
 

interval:
   - interval: 10s
     then:
      - lambda: |-
         if (id(brillix_power_setting).state) {
          id(brillix_power_setting).turn_on();
         } else {
          id(brillix_power_setting).turn_off();
         }
         ESP_LOGI("modbus", "Re-sending coil state: %s", id(brillix_power_setting).state ? "ON" : "OFF");
         // triggers a write_lamdba
         id(brilix_holding_write).turn_on();
      


#Turn on
#02 0F 00 00 00 10 02 05 00 F5 80
#turn off
#02 0F 00 00 00 10 02 04 00 F4 10
# Sets all coils when setting on or off
switch:
  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} Power
    id: brillix_power_setting
    register_type: coil
    address: 0
#    internal: true
    use_write_multiple: true
    restore_mode: RESTORE_DEFAULT_OFF
    write_lambda: |-
      bool on = x == 1;
      payload.push_back(0x02); 
      payload.push_back(0x0F); 
      payload.push_back(0x00); 
      payload.push_back(0x00); 
      payload.push_back(0x00);
      payload.push_back(0x10);
      payload.push_back(0x02);                 
      if (on)
        payload.push_back(0x05); // on
      else
        payload.push_back(0x04); // off
      payload.push_back(0x00); 
      return on;

# write to the holding registers all att once from the templates
  - platform: modbus_controller
    modbus_controller_id: heatpump
    id: brilix_holding_write
    register_type: holding
    internal: true
    address: 0
    write_lambda: |-
      bool on = x == 1;
      int16_t setpoint = id(brilix_setpoint).state * 10;
      int16_t tmpvalue = 0;
      int16_t mode = 0;
      std::string modestr = id(brilix_set_mode_template).state;


      payload.push_back(0x02); 
      payload.push_back(0x10); 
      payload.push_back(0x00); 
      payload.push_back(0x00); 
      payload.push_back(0x00);
      payload.push_back(0x0A);
      payload.push_back(0x14);

      payload.push_back((setpoint >> 8) & 0xFF);
      payload.push_back(setpoint & 0xFF);
      payload.push_back((setpoint >> 8) & 0xFF);
      payload.push_back(setpoint & 0xFF);
      payload.push_back((setpoint >> 8) & 0xFF);
      payload.push_back(setpoint & 0xFF);      
      // unknown
      payload.push_back(0x00);
      payload.push_back(0x00);
      payload.push_back(0x00);      
      payload.push_back(0x00);
      payload.push_back(0x00);
      payload.push_back(0x00);
      // mode
      if (modestr == "Silent") {
        mode = 0;
      } else if (modestr == "Smart") {
        mode = 1;
      } else if (modestr == "Powerfull") {
        mode = 2;
        } else {
        mode = 1;
      }
      payload.push_back((mode >> 8) & 0xFF);
      payload.push_back(mode & 0xFF);     
      // 50
      tmpvalue = 50;
      payload.push_back((tmpvalue >> 8) & 0xFF);
      payload.push_back(tmpvalue & 0xFF);     
      // 350
      tmpvalue = 350;
      payload.push_back((tmpvalue >> 8) & 0xFF);
      payload.push_back(tmpvalue & 0xFF);       
      // 500
      tmpvalue = 500;
      payload.push_back((tmpvalue >> 8) & 0xFF);
      payload.push_back(tmpvalue & 0xFF);  
      ESP_LOGI("modbus", "Re-sending holding states");
      return x;


number:
  - platform: template
    name: "${name_prefix} Setpoint"
    id: brilix_setpoint
    max_value: 40
    min_value: 18
    step: 0.5
    optimistic: True
    initial_value: 30
    restore_value: true
  
select:
  - platform: template
    name: ${name_prefix} Working mode
    id: brilix_set_mode_template
    optimistic: true
    options:
     - "Silent"
     - "Smart"
     - "Powerfull"
    initial_option: "Smart"
    restore_value: True


# Read on/off
# modbus send and response OK
binary_sensor:

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unnown0
    register_type: discrete_input
    address: 0
  
  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown1
    register_type: discrete_input
    address: 1

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} Water Flow
    register_type: discrete_input
    address: 2

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown3
    register_type: discrete_input
    address: 3

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown4
    register_type: discrete_input
    address: 4

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown5
    register_type: discrete_input
    address: 5

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown6
    register_type: discrete_input
    address: 6

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown7
    register_type: discrete_input
    address: 7

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown8
    register_type: discrete_input
    address: 8

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown9
    register_type: discrete_input
    address: 9

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown10
    register_type: discrete_input
    address: 10

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown11
    register_type: discrete_input
    address: 11

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown12
    register_type: discrete_input
    address: 12

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown13
    register_type: discrete_input
    address: 13

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown14
    register_type: discrete_input
    address: 14

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown15
    register_type: discrete_input
    address: 15

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown16
    register_type: discrete_input
    address: 16

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown17
    register_type: discrete_input
    address: 17

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown18
    register_type: discrete_input
    address: 18

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown19
    register_type: discrete_input
    address: 19

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown20
    register_type: discrete_input
    address: 20

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown21
    register_type: discrete_input
    address: 21

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown22
    register_type: discrete_input
    address: 22

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown23
    register_type: discrete_input
    address: 23

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown24
    register_type: discrete_input
    address: 24

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown25
    register_type: discrete_input
    address: 25

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown26
    register_type: discrete_input
    address: 26

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown27
    register_type: discrete_input
    address: 27

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown28
    register_type: discrete_input
    address: 28

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown29
    register_type: discrete_input
    address: 29

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown30
    register_type: discrete_input
    address: 30

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown31
    register_type: discrete_input
    address: 31

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown32
    register_type: discrete_input
    address: 32

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown33
    register_type: discrete_input
    address: 33

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown34
    register_type: discrete_input
    address: 34

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown35
    register_type: discrete_input
    address: 35

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown36
    register_type: discrete_input
    address: 36

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown37
    register_type: discrete_input
    address: 37

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown38
    register_type: discrete_input
    address: 38

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown39
    register_type: discrete_input
    address: 39

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} Power Status
    register_type: discrete_input
    address: 40
  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} Power Status2
    register_type: discrete_input
    address: 41

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown42
    register_type: discrete_input
    address: 42

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown43
    register_type: discrete_input
    address: 43

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown44
    register_type: discrete_input
    address: 44

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown45
    register_type: discrete_input
    address: 45

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown46
    register_type: discrete_input
    address: 46

  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: ${name_prefix} unknown47
    register_type: discrete_input
    address: 47






# modbus send and response OK

sensor:
  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: Water in temp
    unit_of_measurement: '°C'
    register_type: read
    address: 0
    value_type: U_WORD
    device_class: temperature
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: Water out temp
    unit_of_measurement: '°C'
    register_type: read
    address: 1
    value_type: S_WORD
    device_class: temperature
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: Ambient temperature
    unit_of_measurement: '°C'
    register_type: read
    address: 2
    value_type: S_WORD
    device_class: temperature
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: Cold pipe temperature
    unit_of_measurement: '°C'
    register_type: read
    address: 3
    value_type: S_WORD
    device_class: temperature
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: Heating pipe temperature
    unit_of_measurement: '°C'
    register_type: read
    address: 4
    value_type: S_WORD
    device_class: temperature
    filters:
      - multiply: 0.1
    accuracy_decimals: 1
  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: Exaust  temperature
    unit_of_measurement: '°C'
    register_type: read
    address: 5
    value_type: S_WORD
    device_class: temperature
    filters:
      - multiply: 0.1
    accuracy_decimals: 1    
  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: EEV actual
    register_type: read
    address: 6
    value_type: S_WORD
    accuracy_decimals: 0  
  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: Compressor speed
    unit_of_measurement: RPM
    register_type: read
    address: 7
    value_type: S_WORD
    device_class: temperature
    filters:
      - multiply: 0.1
    accuracy_decimals: 1  
  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: IPM
    register_type: read
    address: 8
    value_type: S_WORD
    device_class: temperature
    filters:
      - multiply: 0.1
    accuracy_decimals: 1  
  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: unknown9
    unit_of_measurement: '%'
    register_type: read
    address: 9
    value_type: S_WORD
    filters:
      - calibrate_linear: 
        - 0.0 -> 0.0
        - 450 -> 100.0
    accuracy_decimals: 0  
  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: unknown10
    unit_of_measurement: 'A'
    register_type: read
    address: 10
    value_type: S_WORD
    device_class: Current
    filters:
      - multiply: 0.001
    accuracy_decimals: 2   
  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: unknown11
    register_type: read
    address: 11
    value_type: S_WORD
    device_class: Frequency
  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: unknown12
    register_type: read
    address: 12
    value_type: S_WORD
    device_class: Frequency  
   
  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: unknown13

    register_type: read
    address: 13
    value_type: S_WORD
  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: unknown14

    register_type: read
    address: 14
    value_type: S_WORD 
  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: unknown15

    register_type: read
    address: 15
    value_type: S_WORD 
  - platform: modbus_controller
    modbus_controller_id: heatpump
    name: unknown16

    register_type: read
    address: 16
    value_type: S_WORD 

