# using a analog pressure sensor, logic level converter and a ads1115 this component reads the filter pressure
# this can be used to calculate when to backwash or if the pump is running dry.
substitutions:
  devicename: pool-filter-tryck
  ssid: !secret wifi__iot2_ssid
  ssidpassword: !secret wifi_iot2_password
  otapassword: api_password
  friendly_name: pool-filter-tryck
esphome:
  name: pool-filter-tryck
  platform: ESP8266
  board: d1_mini

  
wifi:
  ssid: ${ssid}
  password: ${ssidpassword}
  manual_ip:
    static_ip: 192.168.2.219
    gateway: 192.168.2.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${devicename}
    password: !secret wifi_ap_password

captive_portal:

api:
  encryption:
    key: !secret api_key
 
ota:
  - platform: esphome
    password: !secret ota_password
logger: 
    
i2c:
  sda: D2
  scl: D1
  scan: True
  frequency: 100kHz
  timeout: 1s

ads1115:
  address: 0x48
#  continuous_mode: on
#  update_interval: 5s
  id: ads1115_48

#https://community.home-assistant.io/t/useing-a-pressure-sensor-in-combination-with-esp-d1-mini-ads1115-level-converter/428424/2
sensor:
  - platform: ads1115
    multiplexer: 'A0_GND'
    gain: 6.144
    name: "Pool Filter Pressure"
    update_interval: 5s
    accuracy_decimals: 1
    unit_of_measurement: "PSI"
    
    filters:
      - calibrate_linear:
        - 0.4 -> 0.0
        - 4.5 -> 30.0    
      - lambda: |-
          if (x <= 0.1) {
            return 0.0;
          } else {
            return x;
          } 
    
  - platform: uptime
    name: Relay Uptime

  - platform: wifi_signal
    name: Relay WiFi Signal
    update_interval: 60s

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${devicename} - IP Address"
    ssid:
      name: "${devicename} - Wi-Fi SSID"
    bssid:
      name: "${devicename} - Wi-Fi BSSID"
  - platform: version
    name: "${devicename} - ESPHome Version"
    hide_timestamp: true     
